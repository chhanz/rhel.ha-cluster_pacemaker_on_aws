{
  "schemaVersion": "2.2",
  "description": "AWS HA Cluster Setup with Node-specific Parameters",
  "parameters": {
    "Node1InstanceId": {
      "type": "String",
      "description": "Instance ID for Node 1",
      "allowedPattern": "^i-[0-9a-f]{8,17}$"
    },
    "Node1PrivateIP": {
      "type": "String",
      "description": "Private IP address for Node 1",
      "allowedPattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
    },
    "Node2InstanceId": {
      "type": "String",
      "description": "Instance ID for Node 2",
      "allowedPattern": "^i-[0-9a-f]{8,17}$"
    },
    "Node2PrivateIP": {
      "type": "String",
      "description": "Private IP address for Node 2",
      "allowedPattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
    },
    "ClusterPassword": {
      "type": "String",
      "description": "Password for HA cluster hacluster user",
      "default": "redhat"
    },
    "ClusterName": {
      "type": "String",
      "description": "Name of the HA cluster",
      "default": "fast-aws-rh-cluster"
    },
    "DeployDummyResource": {
      "type": "String",
      "description": "Deploy dummy resource for testing (true/false)",
      "default": "false",
      "allowedValues": ["true", "false"]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "setupHACluster",
      "inputs": {
        "timeoutSeconds": "3600",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "",
          "# Variables",
          "NODE1_INSTANCE_ID='{{ Node1InstanceId }}'",
          "NODE1_PRIVATE_IP='{{ Node1PrivateIP }}'",
          "NODE2_INSTANCE_ID='{{ Node2InstanceId }}'",
          "NODE2_PRIVATE_IP='{{ Node2PrivateIP }}'",
          "CLUSTER_PASSWORD='{{ ClusterPassword }}'",
          "CLUSTER_NAME='{{ ClusterName }}'",
          "DEPLOY_DUMMY='{{ DeployDummyResource }}'",
          "TOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")",
          "REGION=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -s http://169.254.169.254/latest/meta-data/placement/region)",
          "WORK_DIR='/usr/local/ha_cluster'",
          "",
          "echo \"Setting up HA cluster with 2 nodes\"",
          "echo \"Node1: $NODE1_INSTANCE_ID ($NODE1_PRIVATE_IP)\"",
          "echo \"Node2: $NODE2_INSTANCE_ID ($NODE2_PRIVATE_IP)\"",
          "",
          "# Create working directory",
          "sudo mkdir -p $WORK_DIR/group_vars",
          "cd $WORK_DIR",
          "",

          "# Build configuration variables",
          "PCMK_HOST_MAP=\"fast-aws-rh-node-1:$NODE1_INSTANCE_ID;fast-aws-rh-node-2:$NODE2_INSTANCE_ID\"",
          "",
          "# Create inventory.yml",
          "cat > inventory.yml << EOF",
          "---",
          "all:",
          "  vars:",
          "    ansible_user: haadm",
          "    ansible_password: testtest",
          "    ansible_become: yes",
          "    ansible_become_method: sudo",
          "  children:",
          "    $CLUSTER_NAME:",
          "      hosts:",
          "        fast-aws-rh-node-1:",
          "          ansible_host: $NODE1_PRIVATE_IP",
          "          instance_id: \"$NODE1_INSTANCE_ID\"",
          "        fast-aws-rh-node-2:",
          "          ansible_host: $NODE2_PRIVATE_IP",
          "          instance_id: \"$NODE2_INSTANCE_ID\"",
          "EOF",
          "",
          "# Create hosts update playbook",
          "cat > update-hosts.yaml << EOF",
          "---",
          "- name: Update /etc/hosts on all cluster nodes",
          "  hosts: $CLUSTER_NAME",
          "  tasks:",
          "    - name: Backup existing /etc/hosts",
          "      copy:",
          "        src: /etc/hosts",
          "        dest: /etc/hosts.backup.{{ ansible_date_time.epoch }}",
          "        remote_src: yes",
          "      become: yes",
          "",
          "    - name: Add cluster nodes to /etc/hosts",
          "      blockinfile:",
          "        path: /etc/hosts",
          "        block: |",
          "          # HA Cluster nodes - Added by SSM",
          "          $NODE1_PRIVATE_IP fast-aws-rh-node-1 $NODE1_INSTANCE_ID",
          "          $NODE2_PRIVATE_IP fast-aws-rh-node-2 $NODE2_INSTANCE_ID",
          "        marker: \"# {mark} ANSIBLE MANAGED BLOCK - HA CLUSTER\"",
          "      become: yes",
          "EOF",
          "",
          "# Create main playbook",
          "cat > fast-aws-playbook.yaml << EOF",
          "# SPDX-License-Identifier: MIT",
          "---",
          "- name: Deploy a cluster",
          "  hosts: $CLUSTER_NAME",
          "  roles:",
          "    - rhel-system-roles.ha_cluster",
          "EOF",
          "",
          "# Create group_vars file",
          "cat > group_vars/${CLUSTER_NAME}.yml << EOF",
          "---",
          "ha_cluster_manage_firewall: false",
          "ha_cluster_manage_selinux: false",
          "ha_cluster_hacluster_password: $CLUSTER_PASSWORD",
          "ha_cluster_cluster_name: $CLUSTER_NAME",
          "ha_cluster_start_on_boot: false",
          "ha_cluster_install_cloud_agents: true",
          "ha_cluster_fence_agent_packages:",
          "  - fence-agents-aws",
          "",
          "ha_cluster_resource_primitives:",
          "  - id: mystonith",
          "    agent: stonith:fence_aws",
          "    instance_attrs:",
          "      - attrs:",
          "          - name: pcmk_host_map",
          "            value: $PCMK_HOST_MAP",
          "          - name: region",
          "            value: $REGION",
          "          - name: pcmk_delay_max",
          "            value: 45",
          "          - name: power_timeout",
          "            value: 600",
          "          - name: pcmk_reboot_timeout",
          "            value: 600",
          "          - name: pcmk_reboot_retries",
          "            value: 4",
          "    operations:",
          "      - action: monitor",
          "        attrs:",
          "          - name: interval",
          "            value: 300",
          "          - name: timeout",
          "            value: 60",
          "      - action: start",
          "        attrs:",
          "          - name: timeout",
          "            value: 600",
          "EOF",
          "",
          "# Add dummy resource if requested",
          "if [ \"$DEPLOY_DUMMY\" = \"true\" ]; then",
          "  echo \"Adding dummy resource to configuration...\"",
          "  cat >> group_vars/${CLUSTER_NAME}.yml << EOF",
          "  - id: example-1",
          "    agent: 'ocf:pacemaker:Dummy'",
          "  - id: example-2",
          "    agent: 'ocf:pacemaker:Dummy'",
          "  - id: example-3",
          "    agent: 'ocf:pacemaker:Dummy'",
          "EOF",
          "fi",
          "",
          "echo \"Configuration files created successfully:\"",
          "echo \"- inventory.yml\"",
          "echo \"- update-hosts.yaml\"",
          "echo \"- fast-aws-playbook.yaml\"",
          "echo \"- group_vars/${CLUSTER_NAME}.yml\"",
          "",
          "# Verify Ansible is available",
          "if command -v ansible-playbook &> /dev/null; then",
          "  echo \"Updating /etc/hosts on all nodes...\"",
          "  ansible-playbook -i inventory.yml update-hosts.yaml --ssh-extra-args='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'",
          "  ",
          "  echo \"Running HA cluster deployment...\"",
          "  ansible-playbook -b -i inventory.yml fast-aws-playbook.yaml --ssh-extra-args='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'",
          "else",
          "  echo \"Ansible not found. Please install Ansible and run:\"",
          "  echo \"cd $WORK_DIR && ansible-playbook -i inventory.yml update-hosts.yaml --ssh-extra-args='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'\"",
          "  echo \"cd $WORK_DIR && ansible-playbook -b -i inventory.yml fast-aws-playbook.yaml --ssh-extra-args='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'\"",
          "fi"
        ]
      }
    }
  ]
}